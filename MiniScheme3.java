/* MiniScheme3.java */
/* Generated By:JavaCC: Do not edit this line. MiniScheme3.java */
import java.util.Scanner;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class MiniScheme3 implements MiniScheme3Constants {
  public static Scanner in;

  public static void main(String args[]) throws ParseException
  {
    try {
      MiniScheme3 parser = null;
      in = new Scanner(System.in);
      if (args.length > 0)
      parser = new MiniScheme3(new FileInputStream(args[0]));
      else
      {
        System.out.print("Program filename: ");
        parser = new MiniScheme3(new FileInputStream(in.nextLine()));
       }
      Program p = parser.program();
      p.eval(new Env());
      //p.print();
    }
    catch (FileNotFoundException e)
    {
      System.out.println(e.getMessage());
    }
    catch (RuntimeException e)
    {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

  static final public Program program() throws ParseException {Program p = new Program(); Exp e = null; Definition d = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case IDENTIFIER:
      case 29:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2147483647)) {
        d = def();
p.lineList.add(d);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:
        case BOOLEAN:
        case IDENTIFIER:
        case 29:{
          e = exp();
p.lineList.add(e);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return p;}
    throw new Error("Missing return statement in function");
}

  static final public Definition def() throws ParseException {Definition d = null; Variable var = null; Exp e = null;
    jj_consume_token(29);
    jj_consume_token(DEFINE);
    var = variable();
    e = exp();
    jj_consume_token(30);
d = new Definition(var, e);
{if ("" != null) return d;}
    throw new Error("Missing return statement in function");
}

  static final public Exp exp() throws ParseException {Exp e = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      e = variable();
      break;
      }
    case INTEGER:
    case BOOLEAN:{
      e = literal();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_2(2147483647)) {
        e = cond();
      } else if (jj_2_3(2147483647)) {
        e = assign();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 29:{
          e = derivedExpression();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  static final public Variable variable() throws ParseException {Variable var = null; String id = null;
    jj_consume_token(IDENTIFIER);
id = token.image; var = new Variable(id);
{if ("" != null) return var;}
    throw new Error("Missing return statement in function");
}

  static final public Literal literal() throws ParseException {Literal l = null; String s = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
s = token.image; l = new Int(s);
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
s = token.image; l = new Bool(s);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

  static final public Cond cond() throws ParseException {Cond c = null; Exp e1 = null; Exp e2 = null; Exp e3 = null;
    jj_consume_token(29);
    jj_consume_token(IF);
    e1 = exp();
    e2 = exp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case IDENTIFIER:
    case 29:{
      e3 = exp();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(30);
c = new Cond(e1, e2, e3); {if ("" != null) return c;}
    throw new Error("Missing return statement in function");
}

  static final public Assignment assign() throws ParseException {Assignment a = null; Variable var = null; Exp e = null;
    jj_consume_token(29);
    jj_consume_token(SET);
    var = variable();
    e = exp();
    jj_consume_token(30);
a = new Assignment(var, e);
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
}

  static final public Exp derivedExpression() throws ParseException {Token t = null; Exp e1 = null; Exp e2 = null;
  WriteExpression we = null; ArithExp ae = null;
  ReadExpression re = null; NewlineExpression nl = null;
  LetExp le = null; BindSpec bi = null; Body bod = null;
  AndExp andE = null; OrExp orE = null;
    jj_consume_token(29);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case READ:{
      jj_consume_token(READ);
re = new ReadExpression(in); e1 = re;
      break;
      }
    case WRITE:{
      jj_consume_token(WRITE);
      e1 = exp();
we = new WriteExpression(e1); e1 = we;
      break;
      }
    case NEWLINE:{
      jj_consume_token(NEWLINE);
nl = new NewlineExpression(); e1 = nl;
      break;
      }
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case QUOTIENT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      case MULTIPLY:{
        jj_consume_token(MULTIPLY);
        break;
        }
      case QUOTIENT:{
        jj_consume_token(QUOTIENT);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
t = token;
      e1 = exp();
      e2 = exp();
ae = new ArithExp(t.image, e1, e2); e1 = ae;
      break;
      }
    case LET:{
      jj_consume_token(LET);
le = new LetExp();
      jj_consume_token(29);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 29:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        bi = bindSpec();
le.binds.add(bi);
      }
      jj_consume_token(30);
      bod = body();
le.body = bod; e1=le;
      break;
      }
    case AND:{
      jj_consume_token(AND);
andE = new AndExp();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:
        case BOOLEAN:
        case IDENTIFIER:
        case 29:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        e1 = exp();
andE.expList.add(e1);
      }
e1 = andE;
      break;
      }
    case OR:{
      jj_consume_token(OR);
orE = new OrExp();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:
        case BOOLEAN:
        case IDENTIFIER:
        case 29:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        e1 = exp();
orE.expList.add(e1);
      }
e1 = orE;
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      e1 = exp();
e1 = new NotExp(e1);
      break;
      }
    case EQV_CHECK:{
      jj_consume_token(EQV_CHECK);
      e1 = exp();
      e2 = exp();
e1 = new EqvExp(e1, e2);
      break;
      }
    case LESS_THAN:{
      jj_consume_token(LESS_THAN);
      e1 = exp();
      e2 = exp();
e1 = new LessExp(e1, e2);
      break;
      }
    case INT_CHECK:{
      jj_consume_token(INT_CHECK);
      e1 = exp();
e1 = new IntCheckExp(e1);
      break;
      }
    case BOOL_CHECK:{
      jj_consume_token(BOOL_CHECK);
      e1 = exp();
e1 = new BoolCheckExp(e1);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(30);
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

  static final public BindSpec bindSpec() throws ParseException {Variable var = null; Exp e = null;
    jj_consume_token(29);
    var = variable();
    e = exp();
    jj_consume_token(30);
{if ("" != null) return new BindSpec(var, e);}
    throw new Error("Missing return statement in function");
}

  static final public Body body() throws ParseException {Body bod = new Body(); Definition def = null; Exp exp = null;
    label_5:
    while (true) {
      if (jj_2_4(2147483647)) {
        ;
      } else {
        break label_5;
      }
      def = def();
bod.lines.add(def);
    }
    label_6:
    while (true) {
      exp = exp();
bod.lines.add(exp);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case IDENTIFIER:
      case 29:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
    }
{if ("" != null) return bod;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_derivedExpression_179_7_33()
 {
    if (jj_scan_token(BOOL_CHECK)) return true;
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_178_7_32()
 {
    if (jj_scan_token(INT_CHECK)) return true;
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_177_7_31()
 {
    if (jj_scan_token(LESS_THAN)) return true;
    if (jj_3R_exp_118_9_11()) return true;
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_176_7_30()
 {
    if (jj_scan_token(EQV_CHECK)) return true;
    if (jj_3R_exp_118_9_11()) return true;
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_175_7_29()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3R_cond_148_33_12()
 {
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_174_7_28()
 {
    if (jj_scan_token(OR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_derivedExpression_174_39_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_derivedExpression_173_7_27()
 {
    if (jj_scan_token(AND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_derivedExpression_173_42_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_derivedExpression_172_7_26()
 {
    if (jj_scan_token(LET)) return true;
    if (jj_scan_token(29)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_derivedExpression_172_44_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(30)) return true;
    if (jj_3R_body_195_3_35()) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_171_7_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    }
    }
    if (jj_3R_exp_118_9_11()) return true;
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_170_7_24()
 {
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_169_7_23()
 {
    if (jj_scan_token(WRITE)) return true;
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_168_5_22()
 {
    if (jj_scan_token(READ)) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_166_3_19()
 {
    if (jj_scan_token(29)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_derivedExpression_168_5_22()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_169_7_23()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_170_7_24()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_171_7_25()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_172_7_26()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_173_7_27()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_174_7_28()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_175_7_29()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_176_7_30()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_177_7_31()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_178_7_32()) {
    jj_scanpos = xsp;
    if (jj_3R_derivedExpression_179_7_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_assign_155_3_9()
 {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(SET)) return true;
    if (jj_3R_variable_131_3_10()) return true;
    if (jj_3R_exp_118_9_11()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_cond_148_3_8()
 {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_3R_exp_118_9_11()) return true;
    if (jj_3R_exp_118_9_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_cond_148_33_12()) jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_assign_155_3_9()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_cond_148_3_8()) return true;
    return false;
  }

  static private boolean jj_3R_literal_140_5_21()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_literal_139_5_20()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_exp_123_19_17()
 {
    if (jj_3R_derivedExpression_166_3_19()) return true;
    return false;
  }

  static private boolean jj_3R_literal_138_3_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_literal_139_5_20()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_140_5_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_exp_119_19_13()
 {
    if (jj_3R_variable_131_3_10()) return true;
    return false;
  }

  static private boolean jj_3R_exp_122_15_16()
 {
    if (jj_3R_assign_155_3_9()) return true;
    return false;
  }

  static private boolean jj_3R_exp_121_15_15()
 {
    if (jj_3R_cond_148_3_8()) return true;
    return false;
  }

  static private boolean jj_3R_exp_120_15_14()
 {
    if (jj_3R_literal_138_3_18()) return true;
    return false;
  }

  static private boolean jj_3R_variable_131_3_10()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_exp_118_9_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_exp_119_19_13()) {
    jj_scanpos = xsp;
    if (jj_3R_exp_120_15_14()) {
    jj_scanpos = xsp;
    if (jj_3R_exp_121_15_15()) {
    jj_scanpos = xsp;
    if (jj_3R_exp_122_15_16()) {
    jj_scanpos = xsp;
    if (jj_3R_exp_123_19_17()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_derivedExpression_172_44_34()
 {
    if (jj_3R_bindSpec_188_3_38()) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_173_42_36()
 {
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_def_111_3_7()) return true;
    return false;
  }

  static private boolean jj_3R_derivedExpression_174_39_37()
 {
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_def_111_3_7()) return true;
    return false;
  }

  static private boolean jj_3R_def_111_3_7()
 {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(DEFINE)) return true;
    if (jj_3R_variable_131_3_10()) return true;
    if (jj_3R_exp_118_9_11()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_body_197_6_40()
 {
    if (jj_3R_exp_118_9_11()) return true;
    return false;
  }

  static private boolean jj_3R_body_196_6_39()
 {
    if (jj_3R_def_111_3_7()) return true;
    return false;
  }

  static private boolean jj_3R_body_195_3_35()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_body_196_6_39()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_body_197_6_40()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_body_197_6_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_bindSpec_188_3_38()
 {
    if (jj_scan_token(29)) return true;
    if (jj_3R_variable_131_3_10()) return true;
    if (jj_3R_exp_118_9_11()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniScheme3TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x24000a00,0x24000a00,0x4000a00,0x20000000,0xa00,0x24000a00,0x1e0,0x20000000,0x24000a00,0x24000a00,0x3f971e0,0x24000a00,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniScheme3(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniScheme3(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniScheme3TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniScheme3(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MiniScheme3TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniScheme3TokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniScheme3(MiniScheme3TokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniScheme3TokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[31];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 12; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 31; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 4; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
