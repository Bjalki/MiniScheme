/* Generated By:JavaCC: Do not edit this line. MiniScheme5Constants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MiniScheme5Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int QUOTIENT = 8;
  /** RegularExpression Id. */
  int INTEGER = 9;
  /** RegularExpression Id. */
  int DIGIT = 10;
  /** RegularExpression Id. */
  int BOOLEAN = 11;
  /** RegularExpression Id. */
  int READ = 12;
  /** RegularExpression Id. */
  int WRITE = 13;
  /** RegularExpression Id. */
  int NEWLINE = 14;
  /** RegularExpression Id. */
  int DEFINE = 15;
  /** RegularExpression Id. */
  int LET = 16;
  /** RegularExpression Id. */
  int SET = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int AND = 19;
  /** RegularExpression Id. */
  int OR = 20;
  /** RegularExpression Id. */
  int NOT = 21;
  /** RegularExpression Id. */
  int EQV_CHECK = 22;
  /** RegularExpression Id. */
  int LESS_THAN = 23;
  /** RegularExpression Id. */
  int INT_CHECK = 24;
  /** RegularExpression Id. */
  int BOOL_CHECK = 25;
  /** RegularExpression Id. */
  int LAMBDA = 26;
  /** RegularExpression Id. */
  int PAIR_CHECK = 27;
  /** RegularExpression Id. */
  int CONS_PAIR = 28;
  /** RegularExpression Id. */
  int IDENTIFIER = 29;
  /** RegularExpression Id. */
  int INITIAL = 30;
  /** RegularExpression Id. */
  int SUBSEQUENT = 31;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"quotient\"",
    "<INTEGER>",
    "<DIGIT>",
    "<BOOLEAN>",
    "\"read\"",
    "\"write\"",
    "\"newline\"",
    "\"define\"",
    "\"let\"",
    "\"set!\"",
    "\"if\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"eqv?\"",
    "\"<\"",
    "\"integer?\"",
    "\"boolean?\"",
    "\"lambda\"",
    "\"pair?\"",
    "\"cons\"",
    "<IDENTIFIER>",
    "<INITIAL>",
    "<SUBSEQUENT>",
    "\"(\"",
    "\")\"",
  };

}
