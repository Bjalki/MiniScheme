/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(MiniScheme2)

import java.util.Scanner;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class MiniScheme2
{
  public static Scanner in;
  
  public static void main(String args[]) throws ParseException
  {
    try {
      MiniScheme2 parser = null;
      in = new Scanner(System.in);
      if (args.length > 0)
      parser = new MiniScheme2(new FileInputStream(args[0]));
      else
      {
        System.out.print("Program filename: ");
        parser = new MiniScheme2(new FileInputStream(in.nextLine()));
       }
      Program p = parser.program();
      p.eval(new Env());
      //p.print();
    }
    catch (FileNotFoundException e)
    {
      System.out.println(e.getMessage());
    }
    catch (RuntimeException e)
    {
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(MiniScheme2)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < QUOTIENT : "quotient" >
}

TOKEN: /* NUMBERS */
{
  < INTEGER : ("+" | "-")? (< DIGIT >)+>
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN: /* KEYWORDS */
{
  < READ : "read" >
| < WRITE : "write" >
| < NEWLINE : "newline" >
| < DEFINE : "define" >
| < LET : "let" >
| < SET : "set!" >
}

TOKEN:
{
  < IDENTIFIER : < INITIAL > (< SUBSEQUENT >)* >
| < INITIAL : ["a"-"z", "!", "$", "%", "&", "*", "/", ":", "<", "=", ">", "?", "^", "_", "~"] >
| < SUBSEQUENT: (< INITIAL > | < DIGIT > | ["+", "-", ".", "@"]) >
}

Program program() :
{ Program p = new Program(); Exp e = null; Definition d = null; }
{
  ( LOOKAHEAD(def()) d=def() { p.lineList.add(d); } | e=exp() { p.lineList.add(e); })*
  { return p; }
}

Definition def() :
{ Definition d = null; Variable var = null; Exp e = null; }
{
  "(" < DEFINE > var=variable() e=exp() ")" { d = new Definition(var, e); }
  { return d; }
}

Exp exp() :
{ Exp e = null; }
{
	(		  e=variable()
	    | e=literal()
	    | LOOKAHEAD(assign()) e=assign()
		| e=derivedExpression()
	)
  { return e; }
}

Variable variable() :
{ Variable var = null; String id = null; }
{
  < IDENTIFIER > { id = token.image; var = new Variable(id); }
  { return var; }
}

Literal literal() :
{ Literal l = null; String s = null; }
{
  < INTEGER > { s = token.image; l = new Int(s); }
  { return l; }
}

Assignment assign() :
{ Assignment a = null; Variable var = null; Exp e = null; }
{
  "(" < SET > var=variable() e=exp() ")" { a = new Assignment(var, e); }
  { return a; }
}

Exp derivedExpression() :
{ Token t = null; Exp e1 = null; Exp e2 = null;
  WriteExpression we = null; ArithExp ae = null;
  ReadExpression re = null; NewlineExpression nl = null;
  LetExp le = null; BindSpec bi = null; Body bod = null; }
{
  "("
  (    (< READ > { re = new ReadExpression(in); e1 = re; })
    | (< WRITE > e1=exp() { we = new WriteExpression(e1); e1 = we; })
    | (< NEWLINE > { nl = new NewlineExpression(); e1 = nl; })
    | ((< PLUS > | < MINUS > | < MULTIPLY > | < QUOTIENT >) { t = token; } e1=exp() e2=exp() { ae = new ArithExp(t.image, e1, e2); e1 = ae; })
    | (< LET > { le = new LetExp(); }"(" ( bi=bindSpec() { le.binds.add(bi); })* ")" bod=body() { le.body = bod; e1=le; } )
  )
  ")"
  { return e1; }
}

BindSpec bindSpec() :
{ Variable var = null; Exp e = null; }
{
  "(" var=variable() e=exp() ")"
  { return new BindSpec(var, e); }
}

Body body() :
{ Body bod = new Body(); Definition def = null; Exp exp = null; }
{
  (
    (LOOKAHEAD(def()) def=def() { bod.lines.add(def); })*
    (exp=exp() { bod.lines.add(exp); })+  )
  { return bod; }
}
